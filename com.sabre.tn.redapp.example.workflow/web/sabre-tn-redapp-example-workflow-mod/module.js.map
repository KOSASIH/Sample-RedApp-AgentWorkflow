{"version":3,"sources":["code/views/DecisionSupportTile.ts","code/views/DecisionSupportView.ts","code/models/ServiceData.ts","code/Main.ts","code/sabre-tn-redapp-example-workflow-mod.ts"],"names":["Tile","app","widgets","drawer","views","elements","WithoutFocusOnClick","common","mixins","DecisionSupportTile","_super","__extends","prototype","selfDrawerContextModelPropagated","cpa","getOriginIata","endsWith","this","setDataContent","getFullContent","getTileContent","contentTitle","footer","contents","content","title","__decorate","CssClass_1","CssClass","Mixin_1","Mixin","exports","AbstractView","getService","I18nService","services","impl","i18nService","DecisionSupportView","options","call","flight","flightSeg","drawerSegmentArrivalDate","getFormattedArrivalDate","toSabrishDate","moment","add","Initial_1","Initial","templateOptions","helpers","_t","getScopedHelper","Template_1","Template","AbstractModel","ServiceData","model","_this","serviceID","requestedData","jsonPayload","getServiceID","getRequestedData","getJsonPayload","Initial_2","autoPropagateData","DrawerService","DtoService","Main","init","addConfig","LargeWidgetDrawerConfig_1","LargeWidgetDrawerConfig","DecisionSupportTile_1","DecisionSupportView_1","registerDataModel","ServiceData_1","Module_1","Module","exposedClasses","sabre_tn_redapp_example_workflow_mod","models","_0","_1","_2","sabre_tn_redapp_example_workflow_mod_Module","getExposedClasses","autoExposeClasses","$","extend","Main_1"],"mappings":"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","file":"module.js","sourceRoot":"C:\\TTX17\\ws\\com.sabre.tn.redapp.example.workflow\\web\\src","sourcesContent":["import Tile = app.widgets.drawer.views.elements.Tile;\r\nimport TileOptions = app.widgets.drawer.views.elements.TileOptions;\r\nimport {Initial} from 'sabre-ngv-core/decorators/classes/Initial';\r\nimport WithoutFocusOnClick = app.common.mixins.WithoutFocusOnClick;\r\nimport FlightSegment = app.common.data.flight.FlightSegment;\r\nimport {Mixin} from 'sabre-ngv-core/decorators/classes/Mixin';\r\nimport TileContent = app.widgets.drawer.views.elements.TileContent;\r\nimport {CssClass} from 'sabre-ngv-core/decorators/classes/view/CssClass';\r\n\r\n/*\r\n@Initial<TileOptions>({\r\n    caption: 'decision support widget'\r\n})\r\n*/\r\n\r\n@CssClass('drawer-tile pricing-branded-fare-tile')\r\n@Mixin(WithoutFocusOnClick)\r\nexport class DecisionSupportTile extends Tile<FlightSegment> implements WithoutFocusOnClick {\r\n\r\n    selfDrawerContextModelPropagated(cpa: FlightSegment) {\r\n        if (cpa.getOriginIata().endsWith('DFW')) {\r\n            this.setDataContent(this.getFullContent());\r\n        } else {\r\n            this.setDataContent(this.getTileContent());\r\n        }\r\n    }\r\n\r\n    getTileContent(): string {\r\n        return '<span>CLICK FOR MORE</span><br/><span>If u Dare</span>';\r\n    }\r\n\r\n    getFullContent(): string | TileContent {\r\n        return {\r\n            contentTitle: 'decision support widget',\r\n            footer: 'expand drawer to interact',\r\n            contents: [\r\n                {\r\n                content: 'PACKAGE OPTIONS'\r\n            },\r\n            {\r\n                title: 'if u dare',\r\n                content: 'CLICK FOR MORE'\r\n            }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import {Template} from 'sabre-ngv-core/decorators/classes/view/Template';\r\nimport AbstractView = app.AbstractView;\r\nimport AbstractViewOptions = app.AbstractViewOptions;\r\nimport AbstractModel = app.AbstractModel;\r\nimport getService = app.getService;\r\nimport Data = app.common.data.dto.Data;\r\nimport FlightSegment = app.common.data.flight.FlightSegment;\r\n// import {CPOffersService} from '../services/CPOffersService';\r\nimport {Bound} from 'sabre-ngv-core/decorators/methods/Bound';\r\n// import {CaptainsPackage as CaptainsPackageModel} from '../models/CaptainsPackage';\r\nimport I18nService = app.services.impl.I18nService;\r\nimport {Initial} from 'sabre-ngv-core/decorators/classes/Initial';\r\n// import {CaptainsPackageData} from '../models/CaptainsPackageData';\r\n// import {CaptainsPackageSellData} from '../models/CaptainsPackageSellData';\r\nimport {LayerService} from 'sabre-ngv-core/services/LayerService';\r\n// import {SuccessfulSellModal} from './SuccessfulSellModal';\r\n\r\nconst i18nService: I18nService = getService(I18nService);\r\n\r\n@Initial<AbstractViewOptions>({\r\n    title: 'Decision Support Bar Widget',\r\n    /* events: {\r\n        'click .bf-select': 'selectColumn',\r\n        'click .bf-column-title ::stop-event': 'selectColumn',\r\n        'click .cp-passenger-row': 'updateActionButtons',\r\n        'input input[name=\"cp-travel-date\"]' : 'enableSell'\r\n     }, */\r\n    templateOptions: {\r\n        helpers: {\r\n            _t: i18nService.getScopedHelper('sabre-tn-redapp-example-wokflow-mod/translations')\r\n        }\r\n    }\r\n})\r\n@Template('sabre-tn-redapp-example-workflow-mod:DecisionSupportView')\r\nexport class DecisionSupportView extends AbstractView<AbstractModel> {\r\n\r\n    private modalOpened: boolean;\r\n    private drawerSegmentArrivalDate: string;\r\n    private flightSeg: FlightSegment;\r\n\r\n    constructor(options?: AbstractViewOptions) {\r\n        super(options);\r\n    }\r\n\r\n    // selfCloseAction() {\r\n    //     this.clearFormData();\r\n    // }\r\n\r\n    /*\r\n    selfDismissAction(): void {\r\n        this.clearFormData();\r\n    }\r\n\r\n    selfShownInModal(): void {\r\n        if (this.modalOpened) {\r\n            this.clearFormData();\r\n        }\r\n        getService(CPOffersService).fetchCaptainPackageData().done(this.handleExtPointData);\r\n    }\r\n    */\r\n    selfDrawerContextModelPropagated(flight: FlightSegment): void {\r\n        this.flightSeg = flight;\r\n        this.drawerSegmentArrivalDate = flight.getFormattedArrivalDate ? getService('dates').toSabrishDate(moment(flight.getFormattedArrivalDate()).add(3, 'days')) : '';\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import AbstractModel = app.AbstractModel;\r\nimport Data = app.common.data.dto.Data;\r\nimport EnhancedResponseData = app.common.data.dto.EnhancedResponseData;\r\nimport DataOptions = app.common.data.dto.DataOptions;\r\nimport {Initial} from 'sabre-ngv-core/decorators/classes/Initial';\r\nimport AbstractModelOptions = app.AbstractModelOptions;\r\nimport {Lazy} from 'sabre-ngv-core/decorators/methods/Lazy';\r\n\r\n/**\r\n * Agent Workflow sample Model\r\n * Holds \"generic\" service data received form Redapp Extension Point\r\n */\r\n@Initial<AbstractModelOptions>({\r\n    autoPropagateData: true\r\n})\r\n\r\nexport class ServiceData extends AbstractModel {\r\n\r\n    serviceID: string;\r\n    requestedData: string;\r\n    jsonPayload: string;\r\n\r\n    constructor(model: any) {\r\n        super();\r\n        this.serviceID = model['serviceID'];\r\n        this.requestedData = model['requestedData'];\r\n        this.jsonPayload = model['jsonPayload'];\r\n    }\r\n\r\n    getServiceID(): string {\r\n        return this.serviceID;\r\n    }\r\n\r\n    getRequestedData(): string {\r\n        return this.requestedData;\r\n    }\r\n\r\n    getJsonPayload(): string {\r\n        return this.jsonPayload;\r\n    }\r\n\r\n}","import {Module} from 'sabre-ngv-core/modules/Module';\r\nimport getService = app.getService;\r\nimport DrawerService = app.services.impl.DrawerService;\r\nimport {LargeWidgetDrawerConfig} from 'sabre-ngv-core/configs/drawer/LargeWidgetDrawerConfig';\r\nimport {DecisionSupportTile} from './views/DecisionSupportTile';\r\nimport {DecisionSupportView} from './views/DecisionSupportView';\r\nimport DtoService = app.services.impl.DtoService;\r\nimport {ServiceData} from './models/ServiceData';\r\n\r\nexport class Main extends Module {\r\n    init(): void {\r\n        super.init();\r\n        // initialize your module here\r\n        getService(DrawerService).addConfig(['shopping-response'], new LargeWidgetDrawerConfig(DecisionSupportTile, DecisionSupportView));\r\n\r\n        getService(DtoService).registerDataModel('[d.Structure][o.ExtensionPoint_Summary][workflowdata.ServiceData]', ServiceData);\r\n    }\r\n}\r\n","/* Auto generated file. Do not alter.*/\n                    /* tslint:disable */\n                    import * as _0 from \"./models/ServiceData\"; namespace exposedClasses.sabre_tn_redapp_example_workflow_mod.models { export let ServiceData: any = <any>((<{\"ServiceData\":any}>_0)[\"ServiceData\"]); }\nimport * as _1 from \"./views/DecisionSupportTile\"; namespace exposedClasses.sabre_tn_redapp_example_workflow_mod.views { export let DecisionSupportTile: any = <any>((<{\"DecisionSupportTile\":any}>_1)[\"DecisionSupportTile\"]); }\nimport * as _2 from \"./views/DecisionSupportView\"; namespace exposedClasses.sabre_tn_redapp_example_workflow_mod.views { export let DecisionSupportView: any = <any>((<{\"DecisionSupportView\":any}>_2)[\"DecisionSupportView\"]); } \n               \n                    import {Main} from './Main';\n\n                    export default class sabre_tn_redapp_example_workflow_mod_Module extends Main {\n                        getExposedClasses() : Object {\n                            if( this.autoExposeClasses ) {\n                                return $.extend({}, exposedClasses.sabre_tn_redapp_example_workflow_mod, super.getExposedClasses())\n                            } else {\n                                return super.getExposedClasses();\n                            }\n                        }\n                    }"]}