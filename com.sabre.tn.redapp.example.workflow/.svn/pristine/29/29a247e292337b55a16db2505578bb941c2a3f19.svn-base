package com.sabre.tn.redapp.example.workflow.preferences;

import org.eclipse.jface.preference.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.IWorkbenchPreferencePage;
import org.eclipse.ui.IWorkbench;

import com.sabre.tn.redapp.example.workflow.Activator;

/**
 * This class represents a preference page that
 * is contributed to the Preferences dialog. By 
 * subclassing <samp>FieldEditorPreferencePage</samp>, we
 * can use the field support built into JFace that allows
 * us to create a page that is small and knows how to 
 * save, restore and apply itself.
 * <p>
 * This page is used to modify preferences only. They
 * are stored in the preference store that belongs to
 * the main plug-in class. That way, preferences can
 * be accessed directly via the preference store.
 */

public class AppPreferencePage
	extends FieldEditorPreferencePage
	implements IWorkbenchPreferencePage {

	public AppPreferencePage() {
		super(GRID);
		setPreferenceStore(Activator.getDefault().getPreferenceStore());
		setDescription("Agent Flow Sample Red App, the app is configured for the following listeners :");
	}
	
	/**
	 * Creates the field editors. Field editors are abstractions of
	 * the common GUI blocks needed to manipulate various types
	 * of preferences. Each field editor knows how to save and
	 * restore itself.
	 */
	public void createFieldEditors() {
		
		
		
		
		addField(
				new BooleanFieldEditor(
					PreferenceConstants.P_LISTEN_AVAIL,
					"Listen for availability commands (1...) on emulator and present and View to the agent.",
					SWT.WRAP,
					getFieldEditorParent()));

		
		addField(
				new BooleanFieldEditor(
					PreferenceConstants.P_LISTEN_SELL,
					"Listen for Sell commands (0...) on emulator and present a Notification to the agent, there's option of showing an Editor window when following the notification link.",
					SWT.WRAP,
					getFieldEditorParent()));

		
		addField(
				new BooleanFieldEditor(
					PreferenceConstants.P_MODIFY_RCVDFROM,
					"Implement Command MODIFICATION pattern, listens for Received From command (6...) and append agent name to the ending command.",
					0,
					getFieldEditorParent()));
		

		addField(
				new BooleanFieldEditor(
					PreferenceConstants.P_BLOCK_ER,
					"Implement Command BLOCK pattern, listens for End & Redisplay command (ER) and show popup for user confirmation before commiting the command.",
					SWT.WRAP,
					getFieldEditorParent()));

		/*
		Group grPrefListen = new Group(getFieldEditorParent(), SWT.FILL);
		grPrefListen.setLayout(new GridLayout(1, true));
		grPrefListen.setLayoutData(new GridData(SWT.FILL, SWT.LEFT, true, false, 2, 0));
		grPrefListen.setText("Event Listening for EMU Commands");

		for(int i=1;i<=3;i++){
		
			Group grPrefLine = new Group(grPrefListen, SWT.FILL);
			grPrefLine.setText("Event " + i);
			
			addField(
					new StringFieldEditor(PreferenceConstants.P_CMDLISTEN+i, "&Command to listen for:", grPrefLine));
	
			addField(new ComboFieldEditor(
					PreferenceConstants.P_ONEVENT+i,
					"&UI widget to present:",
					new String[][] { { "Editor", "1" }, {"Custom Web Editor", "5"}, { "View", "2" },{"Web View","6"}, { "Pop-Up", "3" }, { "Notification", "4" }	}, 
					grPrefLine));
			addField(
					new StringFieldEditor(PreferenceConstants.P_MESSAGE+i, "Message to display:", grPrefLine));			
			
			addField(
					new StringFieldEditor(PreferenceConstants.P_ONDISMISS+i, "Command to execute as 'Default Action':", grPrefLine));
		
		
		
		}
		
		Group grPrefIntercept = new Group(getFieldEditorParent(), SWT.FILL);
		grPrefIntercept.setText("Intercept and MODIFY Synchronous EMU Commands");
		grPrefIntercept.setLayoutData(new GridData(SWT.FILL, SWT.LEFT, true, false, 2, 0));
		
		addField(
				new StringFieldEditor(PreferenceConstants.P_INTMODIFY_CMD, "Command to Intercept and Modify:", grPrefIntercept));
		addField(
				new StringFieldEditor(PreferenceConstants.P_INTMODIFYPREPREND_CMD, "String to PREPEND: ", grPrefIntercept));
		
		Group grPrefInterceptB = new Group(getFieldEditorParent(), SWT.FILL);
		grPrefInterceptB.setText("Intercept and BLOCK Synchronous EMU Commands");
		grPrefInterceptB.setLayoutData(new GridData(SWT.FILL, SWT.LEFT, true, false, 2, 0));
		
		addField(new StringFieldEditor(PreferenceConstants.P_INTBLOCK_CMD, "Command to Intercept and Block:", grPrefInterceptB));
		*/

		
/*		addField(new DirectoryFieldEditor(PreferenceConstants.P_PATH, 
				"&Directory preference:", getFieldEditorParent()));
		addField(
			new BooleanFieldEditor(
				PreferenceConstants.P_BOOLEAN,
				"&An example of a boolean preference",
				getFieldEditorParent()));

		addField(new RadioGroupFieldEditor(
				PreferenceConstants.P_CHOICE,
			"An example of a multiple-choice preference",
			1,
			new String[][] { { "&Choice 1", "choice1" }, {
				"C&hoice 2", "choice2" }
		}, getFieldEditorParent()));
		addField(
			new StringFieldEditor(PreferenceConstants.P_STRING, "A &text preference:", getFieldEditorParent()));*/
	}

	/* (non-Javadoc)
	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
	 */
	public void init(IWorkbench workbench) {
	}
	
}