package com.sabre.tn.redapp.example.workflow.uiparts;


import java.io.File;

import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

import org.w3c.dom.Document;
import org.xml.sax.InputSource;


import com.sabre.edge.cf.core.registry.service.ClientResponse;
import com.sabre.edge.cf.core.registry.service.ISRWCommunication;
import com.sabre.edge.cf.model.IError;
import com.sabre.edge.cf.sws.data.SWSRequest;
import com.sabre.edge.cf.sws.data.SWSResponse;
import com.sabre.edge.cf.sws.external.SWSServiceClient;
import com.sabre.tn.redapp.example.workflow.Activator;

public class SWSSoapClientWidget extends Composite{
	
	
	private Combo cbActionCode;
	private Text txtRqPayload;
	private Text txtRsPayload;
	

	public SWSSoapClientWidget(Composite parent, int style) {
		super(parent, style);

		this.setParent(parent);
		this.setLayout(new FillLayout());
		
		Group compMain = new Group(this,SWT.NONE);
		compMain.setText("SWS Soap Services");
		compMain.setLayout(new GridLayout(1, true));
		
		
		Label lblActionCode = new Label(compMain,SWT.NONE);
		lblActionCode.setText("Action Code:");
		
		cbActionCode = new Combo(compMain, SWT.NONE);
		cbActionCode.setItems(new String[]{"TravelItineraryReadRQ","Carbon_CalculatorRQ"});
		
		cbActionCode.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent evt) {
				//look for pre loaded xml payload on resources, if found, get String representation and fill the field
				Combo cbSel = (Combo)evt.getSource();
				File xmlFile = Activator.getDefault().getDataFile(Activator.PLUGIN_ID, "/resources/" + cbSel.getText() + ".xml");
				if(xmlFile.exists()){
					try {
					    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
					    DocumentBuilder dBuilder;
						dBuilder = dbFactory.newDocumentBuilder();
						Document doc = dBuilder.parse(xmlFile);
						
						txtRqPayload.setText(getStringFromDoc(doc));
						
					} catch (Exception e) {
						//log the exception using log services
						Activator.getDefault().getLoggerService().warning(e.getMessage());
						
					}
				    
				    		
					
					
				}
				
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent evt) {
				this.widgetSelected(evt);
				
			}
		});
		
		
		Label lblPl = new Label(compMain,SWT.NONE);
		lblPl.setText("Request Payload:");

		txtRqPayload = new Text(compMain, SWT.MULTI|SWT.BORDER|SWT.WRAP|SWT.V_SCROLL);
		txtRqPayload.setLayoutData(new GridData(GridData.FILL_BOTH));
		
		Button btnExecute = new Button(compMain, SWT.NONE);
		btnExecute.setText("Send Request");
		
		txtRsPayload = new Text(compMain, SWT.MULTI|SWT.BORDER|SWT.WRAP|SWT.V_SCROLL);
		txtRsPayload.setLayoutData(new GridData(GridData.FILL_BOTH));
		
		btnExecute.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent evt) {
				ISRWCommunication comm = Activator.getDefault().getServiceReference(ISRWCommunication.class);
				
				SWSRequest rq = new SWSRequest();
				rq.setAction(cbActionCode.getText());
				
				Document docRq = getDocFromString(txtRqPayload.getText());
				
				rq.setPayload(docRq);
				
				SWSServiceClient cli = new SWSServiceClient(comm);
				ClientResponse<SWSResponse> rsp = cli.send(rq);
				
				String strResponse = "";
				if( rsp.isSuccess()){
					SWSResponse responsePl = rsp.getPayload();
					strResponse = responsePl.getResponseText();
				}else{
					strResponse = "Error calling WebServices :\n";
					for(IError err : rsp.getErrors()){
						strResponse += err.getCode() + "-" + err.getDescription() + "\n";
					}
				}
				
				txtRsPayload.setText(strResponse);
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent evt) {
				this.widgetSelected(evt);
				
			}
		});

		
	}
	
    /**
     * Converting String to Document
     * 
     * @param doc String to convert
     * @return String representation of doc
     */
    private Document getDocFromString(String doc)
    {
        try
        {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			factory.setNamespaceAware(true);
			DocumentBuilder db;
			db = factory.newDocumentBuilder();
			
			InputSource is = new InputSource();
			is.setCharacterStream(new StringReader(doc));
			
			Document docPayload = db.parse(is);
			
			return docPayload;
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            return null;
        }
    }
    
    /**
     * Converting Document to String
     * 
     * @param doc document to convert
     * @return String representation of doc
     */
    private String getStringFromDoc(Document doc)
    {
        try
        {
            DOMSource domSource = new DOMSource(doc);
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.transform(domSource, result);
            String s = writer.toString();
            return s;
        }
        catch (TransformerException ex)
        {
            ex.printStackTrace();
            return null;
        }
    }

}
