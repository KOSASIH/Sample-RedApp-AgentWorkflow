/**
 * 
 */
package com.sabre.tn.redapp.example.workflow.listeners;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.internal.win32.CREATESTRUCT;
import org.eclipse.swt.program.Program;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.ui.PartInitException;

import com.sabre.edge.cf.emu.data.EmulatorCommand;
import com.sabre.edge.cf.emu.data.requests.EmulatorCommandRequest;
import com.sabre.edge.cf.emu.data.responses.EmulatorCommandResponse;
import com.sabre.edge.cf.model.IEvent;
import com.sabre.edge.cf.model.IEventListener;
import com.sabre.edge.cf.model.element.ServiceContext;
import com.sabre.edge.platform.core.common.handlers.OpenBrowserViewHandler;
import com.sabre.edge.platform.core.editor.commands.handlers.OpenAnyEditorHandler;
import com.sabre.edge.platform.core.editor.editors.inputs.AbstractEditorInput;
import com.sabre.edge.platform.core.ui.handlers.OpenViewHandler;
import com.sabre.edge.platform.core.ui.threading.UiThreadInvoker;
import com.sabre.edge.platform.optional.browser.handlers.FocusOrOpenWebAppEditorHandler;
import com.sabre.edge.platform.optional.notifications.INotificationService;
import com.sabre.edge.platform.optional.notifications.types.Notification;
import com.sabre.edge.platform.optional.notifications.types.Priority;
import com.sabre.edge.platform.optional.notifications.types.SideBarColor;
import com.sabre.edge.platform.optional.webkit.handlers.DefaultFocusOrOpenWebkitEditorHandler;
import com.sabre.edge.platform.optional.webkit.handlers.FocusOrOpenWebkitEditorHandler;
import com.sabre.tn.redapp.example.workflow.Activator;
import com.sabre.tn.redapp.example.workflow.editor.CustomBrowserEditor;
import com.sabre.tn.redapp.example.workflow.editor.CustomBrowserEditorInput;
import com.sabre.tn.redapp.example.workflow.editor.SampleEditorEditor;
import com.sabre.tn.redapp.example.workflow.editor.SampleEditorEditorInput;
import com.sabre.tn.redapp.example.workflow.preferences.PreferenceConstants;
import com.sabre.tn.redapp.example.workflow.uiparts.IWidgetAction;
import com.sabre.tn.redapp.example.workflow.uiparts.NotifService;
import com.sabre.tn.redapp.example.workflow.uiparts.PopupDialogs;
import com.sabre.tn.redapp.example.workflow.uiparts.SendEmuCommandAction;
import com.sabre.tn.redapp.example.workflow.views.SampleView;


/**
 * @author SG0207087
 *
 */
public class EventListener implements IEventListener {
	
	/* (non-Javadoc)
	 * @see com.sabre.edge.cf.model.IEventListener#handleEvent(com.sabre.edge.cf.model.IEvent)
	 */
	@Override
	public void handleEvent(IEvent evt) {
		
		IPreferenceStore st = Activator.getDefault().getPreferenceStore();
		
		
		boolean shouldListenAvailability=st.getBoolean(PreferenceConstants.P_LISTEN_AVAIL);
		boolean shouldListenSell=st.getBoolean(PreferenceConstants.P_LISTEN_SELL);
		
		// Asynchronous Event Listening Handler ( all commands, since there's no action code defined)
		if(shouldListenAvailability || shouldListenSell){
			ServiceContext sc = (ServiceContext)evt.getContext();
			EmulatorCommandRequest cmdRQ = (EmulatorCommandRequest) sc.getRequest();
			EmulatorCommandResponse cmdRS = (EmulatorCommandResponse) sc.getResponse();
			EmulatorCommand cmd = cmdRQ.getEmulatorCommand();
			String cmdTyped = cmd.getCommand();
			String cmdResp = cmdRS.getEmulatorResponse()!=null?cmdRS.getEmulatorResponse().getResponse():"";
			
			
			if(cmdTyped!=null && !cmdTyped.isEmpty()){
				
				if(shouldListenAvailability && cmdTyped.startsWith("1")){
					//availability command, show WebKit View
					//showView("Availability command detected : " + cmdTyped + "\nHost Response:" + cmdResp,"");
					showWebView("Availability command detected : " + cmdTyped + "\nHost Response:" + cmdResp);
					
				}
				if(shouldListenSell && cmdTyped.startsWith("0")){
					//add flight segment command, show notification with link to editor extras
					//showView("Availability command detected : " + cmdTyped + "\nHost Response:" + cmdResp,"");
					//showWebView("Availability command detected : " + cmdTyped + "\nHost Response:" + cmdResp);
					showNotificationForEditor("U just sold an segment for this PNR, please ensure Quality Control policies by following the link below", "Sell command detected : " + cmdTyped + "\nHost Response:" + cmdResp);
					//Program.launch("http://www.sabre.com?session=1221sjs");
				}
			
		}
						
			
/*			IPreferenceStore st = Activator.getDefault().getPreferenceStore();
			for(int i=1;i<=5;i++){
			
				
				String cmdMatch = st.getString(PreferenceConstants.P_CMDLISTEN + i);
				
				if(cmdMatch!=null && !cmdMatch.isEmpty()){
					if(cmdTyped.startsWith(cmdMatch)){
						String obTriggerEvt = st.getString(PreferenceConstants.P_ONEVENT + i);
						String msg = st.getString(PreferenceConstants.P_MESSAGE + i);
						String defaultAction = st.getString(PreferenceConstants.P_ONDISMISS + i);
						if(obTriggerEvt.equalsIgnoreCase("1")){
							showEditor(msg);
						}
						if(obTriggerEvt.equalsIgnoreCase("5")){
							showBrowserEditor(msg);
						}
						if(obTriggerEvt.equalsIgnoreCase("2")){
							showView(msg, defaultAction);
						}
						if(obTriggerEvt.equalsIgnoreCase("6")){
							showWebView(msg);
						}

						if(obTriggerEvt.equalsIgnoreCase("3")){
							showPopup(msg, defaultAction);
							
						}
						if(obTriggerEvt.equalsIgnoreCase("4")){
							showNotification(msg, defaultAction);
						}
			
					}
					
				}
				
			}*/
		}
		

	}
	
	private void showEditor(String content){

		new UiThreadInvoker<Object>() {

			@Override
			protected Object invoke() {
				try {

					SampleEditorEditor edRef = (SampleEditorEditor)Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new SampleEditorEditorInput(),"com.sabre.tn.redapp.example.workflow.SampleEditorEditor");
					edRef.setContent(content);
					
				} catch (PartInitException e) {
					e.printStackTrace();
				} catch (Exception e){
					e.printStackTrace();
				}
				return null;
		
			}
			
		}.asyncExec();

	}
	
	private void showBrowserEditor(String contentAsUrl){

		new UiThreadInvoker<Object>() {

			@Override
			protected Object invoke() {
				try {

					if(contentAsUrl!=null && !contentAsUrl.isEmpty()){
						//DefaultFocusOrOpenWebkitEditorHandler
						 
						FocusOrOpenWebAppEditorHandler hnd = new FocusOrOpenWebAppEditorHandler(){
							@Override
							protected void openEditor(
									Map<String, String> parameters) {
								// TODO Auto-generated method stub
								createEditorInput(parameters);
								super.openEditor(parameters);
							}
							
							@Override
							public Object execute(ExecutionEvent event)
									throws ExecutionException {
								// TODO Auto-generated method stub
								
								return super.execute(event);
							}
						};
						
						
						HashMap<String,String> mp = new HashMap<String,String>();
						mp.put("editorId", "com.sabre.tn.redapp.example.workflow.editor.CustomBrowserEditor");
						mp.put("name", "Default Browser Editor");
						mp.put("url", "file:///C:/TTXSB/workspace/com.sabre.tn.redapp.example.workflow/resources/AfterSellQC.html");
						mp.put("pluginId", Activator.PLUGIN_ID);
						
						try{
							new FocusOrOpenWebkitEditorHandler().execute(new ExecutionEvent(mp, null, null));
						}catch(Exception ex){
							
						}
						
						
						
						//Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage()
						//.openEditor( new , contentAsUrl);
						//CustomBrowserEditor edRef = (CustomBrowserEditor)Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor( new CustomBrowserEditorInput(contentAsUrl),"com.sabre.tn.redapp.example.workflow.editor.CustomBrowserEditor");
					}
					else{
						CustomBrowserEditor edRef = (CustomBrowserEditor)Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new CustomBrowserEditorInput(),"com.sabre.tn.redapp.example.workflow.editor.CustomBrowserEditor");						
					}
						
					
				} catch (PartInitException e) {
					e.printStackTrace();
				} catch (Exception e){
					e.printStackTrace();
				}
				return null;
		
			}
			
		}.asyncExec();

	}
	
	
	private void showView(String content, String defaultAction){
	
		new UiThreadInvoker<Object>() {
			@Override
			protected Object invoke() {
				//Straight forward ShowView method, just give the viewId from extensions (plugin.xml)...
				SampleView sv = (SampleView)OpenViewHandler.showView("com.sabre.tn.redapp.example.workflow.redapp.view");
				sv.setContent(content);
				if(!defaultAction.isEmpty()){
					sv.setDefaultAction(new SendEmuCommandAction(defaultAction));
				}
				return null;
			};
		}.asyncExec();
		
	}
	
	private void showWebView(String contentAsUrl){
	
		new UiThreadInvoker<Object>() {
			@Override
			protected Object invoke() {
				if(contentAsUrl!=null && !contentAsUrl.isEmpty()){
					//String path = "file:///C:/TTXSB/workspace/com.sabre.tn.redapp.example.workflow/resources/BrowserWebKit.html";
					
					String path = "file:///C:/TTXSB/workspace/com.sabre.tn.redapp.example.workflow/resources/AvAssistant.html";
					
					
					//String strUrl = "file://" +  Activator.getDefault().getDataDirectory(Activator.PLUGIN_ID).getAbsolutePath() + "/resources/BrowserKit.html?qs=" + contentAsUrl;
					String strUrl="";
					try {
						strUrl = path + "?qs=" + URLEncoder.encode(contentAsUrl,"UTF-8");
					} catch (UnsupportedEncodingException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					//strUrl = "https://html5test.com/";
					OpenBrowserViewHandler.showView("com.sabre.tn.redapp.example.workflow.view.WebKitSampleView",strUrl);
				}else{
					 
				}

				return null;
			};
		}.asyncExec();
		
	}

	
	private void showPopup(String content, String defaultAction){
	
		final String actionCode = defaultAction;
		final String ct = content;
		new UiThreadInvoker<Object>() {
			@Override
			protected Object invoke() {
				if(actionCode.isEmpty())
					new PopupDialogs().showDialog(ct);
				else
					new PopupDialogs().showDialog(ct,new SendEmuCommandAction(actionCode));
				return null;
			};
		}.asyncExec();
		
	}
	
	private void showNotification(String content,String defaultAction) {
		
		new NotifService().showNotification("Notification Service", content, 2000, Priority.NORMAL, SideBarColor.GREEN, defaultAction.isEmpty()?null: new SendEmuCommandAction(defaultAction));
		
	}

	private void showNotificationForEditor(String content,String defaultAction) {
		
		final INotificationService svc = Activator.getDefault().getServiceReference(INotificationService.class);
		final Notification not = new Notification();
		
		
		not.setWindowTitle("Sample Notification - Agent Workflow");
		not.setPriority(Priority.NORMAL);
		not.setContent(content);
		not.setLeftSideBarColor(SideBarColor.GREEN);
		not.setNotificationTime(3000);	
		not.setId("sampleNotification");
		
		
		not.setMoreLabel("more...");
		
		final String edtContent = defaultAction;
		not.setMoreListener(new Listener() {
			
			@Override
			public void handleEvent(Event arg0) {
				String path = "file:///C:/TTXSB/workspace/com.sabre.tn.redapp.example.workflow/resources/BrowserIE.html";
				showBrowserEditor(path);
				//showEditor(edtContent);
				
				svc.destroyNotification("sampleNotification");
			}
		});
	
		
		UiThreadInvoker<Object> invoker = new UiThreadInvoker<Object>() {
			
			@Override
			protected Object invoke() {
				String nId = svc.createNotification(not);
				return nId;
			}
		};
		
		invoker.asyncExec();
		
		
	}
}
