package com.sabre.tn.redapp.example.workflow.listeners;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;

import com.sabre.edge.cf.common.service.ContextStatusAdvisor;
import com.sabre.edge.cf.emu.data.responses.EmulatorCommandResponse;
import com.sabre.edge.cf.model.IRequest;
import com.sabre.edge.cf.model.IService;
import com.sabre.edge.cf.model.IServiceContext;
import com.sabre.edge.cf.model.element.ServiceContext;
import com.sabre.edge.platform.core.ui.threading.UiThreadInvoker;
import com.sabre.tn.redapp.example.workflow.Activator;
import com.sabre.tn.redapp.example.workflow.preferences.PreferenceConstants;
import com.sabre.tn.redapp.example.workflow.uiparts.PopupDialogs;
import com.sabre.tn.redapp.example.workflow.uiparts.SamplePopupDialog;
import com.sabre.tn.redapp.example.workflow.uiparts.SendEmuCommandAction;

public class CommandBlockService implements IService {

	@Override
	public void process(IServiceContext context) {
		
		IPreferenceStore st = Activator.getDefault().getPreferenceStore();
		
		
		boolean shouldBlock=st.getBoolean(PreferenceConstants.P_BLOCK_ER);
		
		
		if(shouldBlock){

			ContextStatusAdvisor contextAdvisor = new ContextStatusAdvisor(context, getClass());
			
			IRequest rq = context.getRequest();
			
			//show an popup indicating that the command is about to be blocked, let the user decide
			boolean resp = (boolean)new UiThreadInvoker<Object>() {
				@Override
				protected Object invoke() {
					return new PopupDialogs().showDialog("The command you typed is about to be blocked, please confirm your operation by clicking on continue button.");
				};
			}.syncExec();
			
			
			if(resp){
				//sending an empty response back will block the command to reach the host
				EmulatorCommandResponse cmdResponse = new EmulatorCommandResponse();
				((ServiceContext) context).setResponse(cmdResponse);
			}

		}
		

	}

}
